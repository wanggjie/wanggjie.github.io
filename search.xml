<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>修改ElementUI文本域的placeholder颜色</title>
    <url>/2020/01/01/01%E4%BF%AE%E6%94%B9%E6%96%87%E6%9C%AC%E5%9F%9F%E7%9A%84placeholder%E9%A2%9C%E8%89%B2/</url>
    <content><![CDATA[<h1 id="修改文本域的placeholder颜色并取消拖拽"><a href="#修改文本域的placeholder颜色并取消拖拽" class="headerlink" title="修改文本域的placeholder颜色并取消拖拽"></a>修改文本域的placeholder颜色并取消拖拽</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.el-textarea</span> /deep/<span class="selector-class">.el-textarea__inner</span> &#123;</span><br><span class="line"> &amp;<span class="selector-pseudo">::placeholder</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#bfc4cc</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: MicrosoftYaHei, PingFangSC-Regular, HiraginoSansGB-W3,</span><br><span class="line">   HelveticaNeue, Helvetica, Arial;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//禁止拖拽</span><br><span class="line"><span class="selector-tag">textarea</span>&#123;</span><br><span class="line"> <span class="attribute">resize</span>:none;  <span class="comment">/* 取消拖拽 */</span></span><br><span class="line"> <span class="attribute">outline</span>: none;<span class="comment">/* 取消选中高亮 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>文本域</tag>
      </tags>
  </entry>
  <entry>
    <title>ip4/6及ip段的正则表达式校验</title>
    <url>/2020/01/03/02ip%E5%8F%8Aip%E6%AE%B5%E6%A0%A1%E9%AA%8C-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="ip4-x2F-6的正则表达式校验规则"><a href="#ip4-x2F-6的正则表达式校验规则" class="headerlink" title="ip4&#x2F;6的正则表达式校验规则"></a>ip4&#x2F;6的正则表达式校验规则</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ip4</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">validIp4</span> = (<span class="params">rule, value, callback</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (value == <span class="string">&quot;&quot;</span> || value == <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;请输入ip&quot;</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> ipv4 =</span><br><span class="line">          <span class="string">&quot;((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)&quot;</span>;</span><br><span class="line">        <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`^(<span class="subst">$&#123;ipv4&#125;</span>)$`</span>);</span><br><span class="line">          <span class="comment">//let reg = /^($&#123;ipv4&#125;)$/</span></span><br><span class="line">        <span class="keyword">if</span> (!reg.<span class="title function_">test</span>(value)) &#123;</span><br><span class="line">          <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;ip格式不正确&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">callback</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ip6</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">validIp6</span> = (<span class="params">rule, value, callback</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (value) &#123;</span><br><span class="line">    <span class="keyword">const</span> ipv6 =</span><br><span class="line">      <span class="string">&quot;([\\da-fA-F]&#123;1,4&#125;:)&#123;6&#125;((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|::([\\da-fA-F]&#123;1,4&#125;:)&#123;0,4&#125;((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|([\\da-fA-F]&#123;1,4&#125;:):([\\da-fA-F]&#123;1,4&#125;:)&#123;0,3&#125;((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|([\\da-fA-F]&#123;1,4&#125;:)&#123;2&#125;:([\\da-fA-F]&#123;1,4&#125;:)&#123;0,2&#125;((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|([\\da-fA-F]&#123;1,4&#125;:)&#123;3&#125;:([\\da-fA-F]&#123;1,4&#125;:)&#123;0,1&#125;((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|([\\da-fA-F]&#123;1,4&#125;:)&#123;4&#125;:((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|([\\da-fA-F]&#123;1,4&#125;:)&#123;7&#125;[\\da-fA-F]&#123;1,4&#125;|:((:[\\da-fA-F]&#123;1,4&#125;)&#123;1,6&#125;|:)|[\\da-fA-F]&#123;1,4&#125;:((:[\\da-fA-F]&#123;1,4&#125;)&#123;1,5&#125;|:)|([\\da-fA-F]&#123;1,4&#125;:)&#123;2&#125;((:[\\da-fA-F]&#123;1,4&#125;)&#123;1,4&#125;|:)|([\\da-fA-F]&#123;1,4&#125;:)&#123;3&#125;((:[\\da-fA-F]&#123;1,4&#125;)&#123;1,3&#125;|:)|([\\da-fA-F]&#123;1,4&#125;:)&#123;4&#125;((:[\\da-fA-F]&#123;1,4&#125;)&#123;1,2&#125;|:)|([\\da-fA-F]&#123;1,4&#125;:)&#123;5&#125;:([\\da-fA-F]&#123;1,4&#125;)?|([\\da-fA-F]&#123;1,4&#125;:)&#123;6&#125;:&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`^(<span class="subst">$&#123;ipv6&#125;</span>)$`</span>);</span><br><span class="line">    <span class="keyword">if</span> (!reg.<span class="title function_">test</span>(value)) &#123;</span><br><span class="line">      <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;ip格式不正确&quot;</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">callback</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">callback</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="ip4-x2F-6段的正则表达式校验规则"><a href="#ip4-x2F-6段的正则表达式校验规则" class="headerlink" title="ip4&#x2F;6段的正则表达式校验规则"></a>ip4&#x2F;6段的正则表达式校验规则</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">validIp</span> = (<span class="params">rule, value, callback</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (value == <span class="string">&quot;&quot;</span> || value == <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;请输入ip段&quot;</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> semicolon = <span class="string">&quot;[;；]&quot;</span>;</span><br><span class="line">        <span class="keyword">const</span> ipv4 =</span><br><span class="line">          <span class="string">&quot;((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)&quot;</span>;</span><br><span class="line">        <span class="keyword">const</span> mask = <span class="string">&quot;([1-9]|[1-2][0-9]|3[0-2])&quot;</span>;</span><br><span class="line">        <span class="keyword">const</span> ipv6WithMask =</span><br><span class="line">          <span class="string">&quot;([\\da-fA-F]&#123;1,4&#125;:)&#123;6&#125;((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)(\\/([1-9]|[1-9]\\d|1[01]\\d|12[0-8]))|::([\\da-fA-F]&#123;1,4&#125;:)&#123;0,4&#125;((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)(\\/([1-9]|[1-9]\\d|1[01]\\d|12[0-8]))|([\\da-fA-F]&#123;1,4&#125;:):([\\da-fA-F]&#123;1,4&#125;:)&#123;0,3&#125;((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)(\\/([1-9]|[1-9]\\d|1[01]\\d|12[0-8]))|([\\da-fA-F]&#123;1,4&#125;:)&#123;2&#125;:([\\da-fA-F]&#123;1,4&#125;:)&#123;0,2&#125;((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)(\\/([1-9]|[1-9]\\d|1[01]\\d|12[0-8]))|([\\da-fA-F]&#123;1,4&#125;:)&#123;3&#125;:([\\da-fA-F]&#123;1,4&#125;:)&#123;0,1&#125;((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)(\\/([1-9]|[1-9]\\d|1[01]\\d|12[0-8]))|([\\da-fA-F]&#123;1,4&#125;:)&#123;4&#125;:((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)(\\/([1-9]|[1-9]\\d|1[01]\\d|12[0-8]))|([\\da-fA-F]&#123;1,4&#125;:)&#123;7&#125;[\\da-fA-F]&#123;1,4&#125;(\\/([1-9]|[1-9]\\d|1[01]\\d|12[0-8]))|:((:[\\da-fA-F]&#123;1,4&#125;)&#123;1,6&#125;|:)(\\/([1-9]|[1-9]\\d|1[01]\\d|12[0-8]))|[\\da-fA-F]&#123;1,4&#125;:((:[\\da-fA-F]&#123;1,4&#125;)&#123;1,5&#125;|:)(\\/([1-9]|[1-9]\\d|1[01]\\d|12[0-8]))|([\\da-fA-F]&#123;1,4&#125;:)&#123;2&#125;((:[\\da-fA-F]&#123;1,4&#125;)&#123;1,4&#125;|:)(\\/([1-9]|[1-9]\\d|1[01]\\d|12[0-8]))|([\\da-fA-F]&#123;1,4&#125;:)&#123;3&#125;((:[\\da-fA-F]&#123;1,4&#125;)&#123;1,3&#125;|:)(\\/([1-9]|[1-9]\\d|1[01]\\d|12[0-8]))|([\\da-fA-F]&#123;1,4&#125;:)&#123;4&#125;((:[\\da-fA-F]&#123;1,4&#125;)&#123;1,2&#125;|:)(\\/([1-9]|[1-9]\\d|1[01]\\d|12[0-8]))|([\\da-fA-F]&#123;1,4&#125;:)&#123;5&#125;:([\\da-fA-F]&#123;1,4&#125;)?(\\/([1-9]|[1-9]\\d|1[01]\\d|12[0-8]))|([\\da-fA-F]&#123;1,4&#125;:)&#123;6&#125;:(\\/([1-9]|[1-9]\\d|1[01]\\d|12[0-8]))&quot;</span>;</span><br><span class="line">        <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(</span><br><span class="line">          <span class="string">`^((<span class="subst">$&#123;ipv4&#125;</span>\\/<span class="subst">$&#123;mask&#125;</span>)|(<span class="subst">$&#123;ipv6WithMask&#125;</span>))(<span class="subst">$&#123;semicolon&#125;</span>((<span class="subst">$&#123;ipv4&#125;</span>\\/<span class="subst">$&#123;mask&#125;</span>)|(<span class="subst">$&#123;ipv6WithMask&#125;</span>)))*$`</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span> (!reg.<span class="title function_">test</span>(value)) &#123;</span><br><span class="line">          <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;格式不正确&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">callback</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>端口域名的正则表达式校验</title>
    <url>/2020/01/04/03%E7%AB%AF%E5%8F%A3%E5%9F%9F%E5%90%8D%E6%A0%A1%E9%AA%8C-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="端口域名的正则表达式校验规则"><a href="#端口域名的正则表达式校验规则" class="headerlink" title="端口域名的正则表达式校验规则"></a>端口域名的正则表达式校验规则</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在rules配置域名domain字段的正则表达式校验</span></span><br><span class="line"><span class="attr">rules</span>: &#123;</span><br><span class="line">  <span class="attr">domain</span>: [</span><br><span class="line">          <span class="comment">// 支持 泛域名 *.ctyun.cn</span></span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span>,</span><br><span class="line">              <span class="attr">pattern</span>: <span class="regexp">/^(\*\.|\*)?([a-zA-Z0-9]([a-zA-Z0-9-]&#123;0,61&#125;[a-zA-Z0-9])?\.)+[a-zA-Z]&#123;2,6&#125;$/</span>,</span><br><span class="line">              <span class="attr">message</span>: <span class="string">&quot;请输入正确的域名&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置端口正则表达式校验的处理函数</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">valiPost</span> = (<span class="params">rule, value, callback</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (value == <span class="string">&quot;&quot;</span> || value == <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;请输入端口数字值&quot;</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="title class_">Post</span> =<span class="regexp">/^([0-9]|[1-9]\d|[1-9]\d&#123;2&#125;|[1-9]\d&#123;3&#125;|[1-5]\d&#123;4&#125;|6[0-4]\d&#123;3&#125;|65[0-4]\d&#123;2&#125;|655[0-2]\d|6553[0-5])$/</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title class_">Post</span>.<span class="title function_">test</span>(value)) &#123;</span><br><span class="line">          <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;端口不在合法范围&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">callback</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>前端获取响应头返回的字段</title>
    <url>/2020/01/10/04%E5%89%8D%E7%AB%AF%E8%8E%B7%E5%8F%96%E5%93%8D%E5%BA%94%E5%A4%B4%E8%BF%94%E5%9B%9E%E7%9A%84%E5%AD%97%E6%AE%B5/</url>
    <content><![CDATA[<h1 id="前端获取响应头返回的字段"><a href="#前端获取响应头返回的字段" class="headerlink" title="前端获取响应头返回的字段"></a>前端获取响应头返回的字段</h1><p>1：在导出文件的时候，有些文件名需要后端那边动态展示，后端便会在响应头返回某字段<br>2：前端需要知道怎么获取<br>3：有些后端也没有试过怎么从响应头返回字段，有些仅以为写某些字段在响应头就行<br>4：前端现在只看得到，去拿不到<br>4：此时后端需要在响应头上设置 Access-Control-Expose-Headers</p>
<p><img src="/2020/01/10/04%E5%89%8D%E7%AB%AF%E8%8E%B7%E5%8F%96%E5%93%8D%E5%BA%94%E5%A4%B4%E8%BF%94%E5%9B%9E%E7%9A%84%E5%AD%97%E6%AE%B5/01.png"></p>
]]></content>
      <tags>
        <tag>响应头</tag>
      </tags>
  </entry>
  <entry>
    <title>去掉空格、换行的正则表达式</title>
    <url>/2020/01/13/05%E5%8E%BB%E6%8E%89%E7%A9%BA%E6%A0%BC%E6%A0%A1%E9%AA%8C-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="去掉空格、换行的正则表达式"><a href="#去掉空格、换行的正则表达式" class="headerlink" title="去掉空格、换行的正则表达式"></a>去掉空格、换行的正则表达式</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//去除空格 </span></span><br><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">Trim</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123; </span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">replace</span>(<span class="regexp">/\s+/g</span>, <span class="string">&quot;&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//去除换行 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ClearBr</span>(<span class="params">key</span>) &#123; </span><br><span class="line">key = key.<span class="title function_">replace</span>(<span class="regexp">/&lt;\/?.+?&gt;/g</span>,<span class="string">&quot;&quot;</span>); </span><br><span class="line">key = key.<span class="title function_">replace</span>(<span class="regexp">/[\r\n]/g</span>, <span class="string">&quot;&quot;</span>); </span><br><span class="line"><span class="keyword">return</span> key; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//去除左侧空格 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">LTrim</span>(<span class="params">str</span>) &#123; </span><br><span class="line"><span class="keyword">return</span> str.<span class="title function_">replace</span>(<span class="regexp">/^\s*/g</span>,<span class="string">&quot;&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//去右空格 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">RTrim</span>(<span class="params">str</span>) &#123; </span><br><span class="line"><span class="keyword">return</span> str.<span class="title function_">replace</span>(<span class="regexp">/\s*$/g</span>,<span class="string">&quot;&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//去掉字符串两端的空格 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">trim</span>(<span class="params">str</span>) &#123; </span><br><span class="line"><span class="keyword">return</span> str.<span class="title function_">replace</span>(<span class="regexp">/(^\s*)|(\s*$)/g</span>, <span class="string">&quot;&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//去除字符串中间空格 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">CTim</span>(<span class="params">str</span>) &#123; </span><br><span class="line"><span class="keyword">return</span> str.<span class="title function_">replace</span>(<span class="regexp">/\s/g</span>,<span class="string">&#x27;&#x27;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>空格</tag>
      </tags>
  </entry>
  <entry>
    <title>验证码流字符串转图片（*js-base64*）</title>
    <url>/2020/01/20/06%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B5%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h1 id="验证码流字符串转图片（js-base64）"><a href="#验证码流字符串转图片（js-base64）" class="headerlink" title="验证码流字符串转图片（js-base64）"></a>验证码流字符串转图片（<em>js-base64</em>）</h1><p>1：下载第三方包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i js-base64</span><br></pre></td></tr></table></figure>


<h2 id="js-base64常规方法：编码-解码-乱码"><a href="#js-base64常规方法：编码-解码-乱码" class="headerlink" title="js-base64常规方法：编码-解码-乱码"></a>js-base64常规方法：编码-解码-乱码</h2><p>（官方文档<a href="https://www.npmjs.com/package/js-base64%EF%BC%89">https://www.npmjs.com/package/js-base64）</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编码base64</span></span><br><span class="line"> <span class="title function_">getEncode64</span>(<span class="params">str</span>)&#123;</span><br><span class="line">     <span class="comment">// 对字符串进行编码</span></span><br><span class="line">     <span class="keyword">var</span> encode = <span class="built_in">encodeURI</span>(str);</span><br><span class="line">     <span class="comment">// 对编码的字符串转化base64</span></span><br><span class="line">     <span class="keyword">var</span> base64 = <span class="title function_">btoa</span>(encode);</span><br><span class="line">     <span class="keyword">return</span> base64;</span><br><span class="line">   &#125;,</span><br><span class="line">       </span><br><span class="line"><span class="comment">// base64转字符串解码</span></span><br><span class="line">   <span class="title function_">getDecode</span>(<span class="params">str</span>)&#123;</span><br><span class="line">      <span class="comment">// 对base64转编码</span></span><br><span class="line">      <span class="keyword">var</span> decode = <span class="title function_">atob</span>(base64);</span><br><span class="line">      <span class="comment">// 编码转字符串</span></span><br><span class="line">      <span class="keyword">var</span> str = <span class="built_in">decodeURI</span>(decode);</span><br><span class="line">      <span class="keyword">return</span> str;</span><br><span class="line">  &#125;,</span><br><span class="line">      </span><br><span class="line"><span class="comment">//问题：</span></span><br><span class="line">用上述的编码和解码，自己前端操作编译和解码中文都是没有问题的，但是由于需要后台，编码后传输到后台，后台返回编码格式再解码的时候就会出现中文乱码。</span><br><span class="line"></span><br><span class="line">原因：</span><br><span class="line">一番查找下来，可能是由于 常规的encode方法虽然界面上转的是utf-<span class="number">8</span>，但是实际上传输存储的时候格式还是utf-<span class="number">16</span>，后台返回的是utf-<span class="number">8</span>格式，用decode界面实际上转的是utf-<span class="number">16</span>,转utf-<span class="number">8</span>会出现中文乱码。也就是说上述的编码和解码，适用于页面本身编码解码，不适合传输用。</span><br><span class="line"></span><br><span class="line"><span class="comment">//解决解码中文乱码：</span></span><br><span class="line"><span class="title function_">getEncode64</span>(<span class="params">str</span>)&#123;   </span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">btoa</span>(<span class="built_in">encodeURIComponent</span>(str).<span class="title function_">replace</span>(<span class="regexp">/%([0-9A-F]&#123;2&#125;)/g</span>,</span><br><span class="line">          <span class="keyword">function</span> <span class="title function_">toSolidBytes</span>(<span class="params">match, p1</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="string">&#x27;0x&#x27;</span> + p1);</span><br><span class="line">         &#125;));</span><br><span class="line">            </span><br><span class="line">  &#125;,</span><br><span class="line">      </span><br><span class="line"><span class="title function_">getDecode</span>(<span class="params">str</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(<span class="title function_">atob</span>(str).<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">c</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&#x27;%&#x27;</span> + (<span class="string">&#x27;00&#x27;</span> + c.<span class="title function_">charCodeAt</span>(<span class="number">0</span>).<span class="title function_">toString</span>(<span class="number">16</span>)).<span class="title function_">slice</span>(-<span class="number">2</span>);</span><br><span class="line">      &#125;).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>

<h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
      <tags>
        <tag>验证码</tag>
      </tags>
  </entry>
  <entry>
    <title>this.$set(),对象和数组的注入方式</title>
    <url>/2020/01/24/07this.$set%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%95%B0%E7%BB%84%E7%9A%84%E6%B3%A8%E5%85%A5%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="this-set-对象和数组的注入方式"><a href="#this-set-对象和数组的注入方式" class="headerlink" title="this.$set(),对象和数组的注入方式"></a>this.$set(),对象和数组的注入方式</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对象</span></span><br><span class="line"><span class="variable language_">this</span>.$set(<span class="string">&#x27;&#123;object&#125;&#x27;</span>,<span class="string">&#x27;要添加注入的属性名&#x27;</span>,<span class="string">&#x27;设置的属性值&#x27;</span>)</span><br><span class="line"><span class="comment">//数组</span></span><br><span class="line"><span class="variable language_">this</span>.$set(<span class="string">&#x27;数组&#x27;</span>,<span class="title function_">index</span>(数组的下标),<span class="string">&#x27;要赋的值值&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>$set</tag>
      </tags>
  </entry>
  <entry>
    <title>表单enter阻止事件</title>
    <url>/2020/02/02/08%E8%A1%A8%E5%8D%95enter%E9%98%BB%E6%AD%A2%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="表单enter阻止事件"><a href="#表单enter阻止事件" class="headerlink" title="表单enter阻止事件"></a>表单enter阻止事件</h1><p>1：需要添加 @submit.native.prevent 事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;el-form :inline=<span class="string">&quot;true&quot;</span> :model=<span class="string">&quot;search&quot;</span> @submit.<span class="property">native</span>.<span class="property">prevent</span>&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>表单</tag>
      </tags>
  </entry>
</search>
